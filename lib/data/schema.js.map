{"version":3,"sources":["../../src/data/schema.js"],"names":[],"mappings":"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","file":"schema.js","sourcesContent":["import {\r\n    GraphQLSchema,\r\n    GraphQLObjectType,\r\n    GraphQLInt,\r\n    GraphQLString,\r\n    GraphQLBoolean,\r\n    GraphQLList,\r\n    GraphQLNonNull,\r\n    GraphQLInputObjectType as inputType,\r\n    GraphQLEnumType\r\n} from 'graphql';\r\n\r\nimport validator from '../handlers/validator';\r\nimport enums from './enums'\r\n\r\nlet Schema = (db) => {\r\n    \r\n    var enumProvider = enums(db); \r\n    \r\n    let countryEnum = new GraphQLEnumType({\r\n        name: 'countryEnum',\r\n        values: enumProvider.countriesToEnum()\r\n    });\r\n    \r\n    let positionEnum = new GraphQLEnumType({\r\n        name: \"positionEnum\",\r\n        values: enumProvider.positionsToEnum()\r\n    });\r\n    \r\n    let delegationLevelEnum = new GraphQLEnumType({\r\n        name: 'delegationLevelEnum',\r\n        values: {\r\n            HRM: {value: 6, description: \"Staff\"},\r\n            HR: {value: 5, description: \"Learning & Development, HR\"},\r\n            Executive: {value: 3, description: \"Executives\"},\r\n            AllAccess: {value: 2, description: \"All ACcess\"},\r\n            SysAdmin: {value: 1, description: \"System Admin\"}            \r\n        }\r\n    });\r\n    \r\n    let agreementTypeEnum = new GraphQLEnumType({\r\n        name: 'agreementTypeEnum',\r\n        values: {\r\n            Test1: {value: 6, description: \"Staff\"},\r\n            Test2: {value: 5, description: \"Learning & Development, HR\"},\r\n            Test3: {value: 3, description: \"Executives\"}\r\n            \r\n        }\r\n    });\r\n    \r\n    let agreementClassificationEnum = new GraphQLEnumType({\r\n        name: \"agreementClassificationEnum\",\r\n        values: {\r\n             AgreementClassification1: {value: 6, description: \"Staff\"},\r\n             AgreementClassification2: {value: 5, description: \"Learning & Development, HR\"},\r\n             AgreementClassification3: {value: 3, description: \"Executives\"}\r\n        }\r\n    });\r\n    \r\n    \r\n    let assetEnum = new GraphQLEnumType({\r\n        name: \"assetEnum\",\r\n        values: {\r\n            M34005: {value: 1, description: \"Sch of Nursing & Midwifery Head Office\"},\r\n            M37004: {value: 2, description: \"East Gippsland RCS\"},\r\n            S0223: {value: 3, description: \"Chemistry - Pas\"}\r\n        }\r\n    });\r\n    \r\n    let jobTypeEnum = new GraphQLEnumType({\r\n        name: \"jobTypeEnum\",\r\n        values: {\r\n            JobType1: {value: 1},\r\n            JobType2: {value: 2},\r\n        }\r\n    });\r\n    \r\n    let workPayStructureEnum = new GraphQLEnumType({\r\n        name: \"workPayStructureEnum\",\r\n        values: {\r\n            BaseSalary: {value: 1},\r\n            SalesAndIncentive: {value: 2},\r\n            ExecutiveNonSales: {value: 3}\r\n        }\r\n    });\r\n    \r\n     let workTypeEnum = new GraphQLEnumType({\r\n        name: \"workTypeEnum\",\r\n        values: {\r\n            PartTime: {value: 1},\r\n            FullTime: {value: 2},\r\n            Contractor: {value: 3},\r\n            Casual: {value: 4},\r\n            FixedTerm: {value: 5},\r\n            \r\n        }\r\n    });\r\n    \r\n    let jobSectorEnum = new GraphQLEnumType({\r\n        name: \"jobSectorEnum\",\r\n        values: {\r\n            PartTime: {value: 1},\r\n            FullTime: {value: 2},\r\n            Contractor: {value: 3},\r\n            Casual: {value: 4},\r\n            FixedTerm: {value: 5},\r\n            \r\n        }\r\n    });\r\n    \r\n    let costCenter = new GraphQLObjectType({\r\n        name: \"costCenter\",\r\n        fields: {\r\n            costCenterNumber: {type: GraphQLString},\r\n            costCenterDescription: {type: GraphQLString}\r\n        }\r\n    });\r\n    \r\n     let costCenterInput = new inputType({\r\n        name: \"costCenterInput\",\r\n        fields: {\r\n            costCenterNumber: {type: GraphQLString},\r\n            costCenterDescription: {type: GraphQLString}\r\n        }\r\n    });\r\n    \r\n    \r\n    let state = new GraphQLObjectType({\r\n        name: \"state\",\r\n        country: countryEnum,\r\n        fields: () => ({\r\n            // id: {type: GraphQLInt },\r\n            name: {type: GraphQLString}\r\n        })\r\n    });\r\n    \r\n    let inputState = new inputType({\r\n        name: \"inputState\",\r\n        fields: () => ({\r\n            id: {type: GraphQLInt },\r\n            name: { type: GraphQLString }\r\n        })\r\n    });\r\n    \r\n     \r\n  let country = new GraphQLObjectType({\r\n        name: \"country\",\r\n        fields: () => ({\r\n              id: {type: GraphQLInt,},\r\n              state: {type: state},\r\n              name: {type: GraphQLString}\r\n        }),\r\n        resolve: (parent) => {\r\n            \r\n        }\r\n    });\r\n    \r\n    \r\n    let inputCountry = new inputType({\r\n        name: \"inputCountry\",\r\n        fields: () => ({\r\n            name: {type: GraphQLString}\r\n        })\r\n    });\r\n        \r\n    \r\n     let site = new GraphQLObjectType({\r\n        name: \"site\",\r\n        fields: () => ({\r\n            id: {type: GraphQLInt},\r\n            siteNo: { type: GraphQLString},\r\n            name: {type: GraphQLString},\r\n            address1: {type: GraphQLString},\r\n            address2: {type: GraphQLString},\r\n            suburb: {type: GraphQLString},\r\n            city: {type: GraphQLString},\r\n            country: { type: country,\r\n                        resolve: (site, args, ast) => {\r\n                            return db.countries[site.country];\r\n                        }\r\n                    },\r\n            state: { type: state,\r\n                        resolve: (site, args, ast) => {\r\n                        if (site.state != undefined){\r\n                            return db.states[site.state] == undefined ? null : db.states[site.state];\r\n                        }\r\n                    return null;\r\n                }\r\n            },\r\n            businessLayer1: { type: GraphQLString },\r\n            postcode: { type: GraphQLString } \r\n        })\r\n    });\r\n    \r\n    \r\n      let inputSite = new inputType({\r\n        name: \"inputSite\",\r\n        fields: () => ({\r\n            id: { type: GraphQLInt },\r\n            siteNo: { type: GraphQLString },\r\n            name: { type: GraphQLString },\r\n            address1: { type: GraphQLString },\r\n            address2: { type: GraphQLString },\r\n            suburb: { type: GraphQLString },\r\n            city: { type: GraphQLString },\r\n            country: { type: countryEnum},\r\n            businessLayer1: { type: GraphQLString },\r\n            postcode: { type: GraphQLString } \r\n        })\r\n    });\r\n    \r\n\r\n    let updateSiteResult = new GraphQLObjectType({\r\n            name: \"updateSiteResult\",\r\n            fields: () => ({\r\n                errors: {type: new GraphQLNonNull(new GraphQLList(GraphQLString))},\r\n                site: {type: site}\r\n        })\r\n    });\r\n\r\n    let updateSite = {\r\n        name: \"updateSite\",\r\n        type: updateSiteResult,\r\n        args: {\r\n            site: {type: inputSite}\r\n        },\r\n        resolve: (value, {site}) => {\r\n            let errors = [];\r\n            console.log(\"In resolver\")\r\n            console.log(site)\r\n            console.log(site.id)\r\n            var error = false;\r\n            if (!validator.validateNonEmptyId(site.id)){\r\n                console.log(\"id check failed\")\r\n                errors.push(...[\"id\",\"id must be supplied\"]);\r\n                error = true;\r\n            }\r\n             if (!validator.validateCountry(site.country)){\r\n                errors.push(...[\"country\",\"country must be supplied\"]);\r\n                error = true;\r\n             }\r\n            if (!error) {\r\n                var existingSite = db.sites[site.id];\r\n\r\n                existingSite.address1 = site.address1;\r\n                existingSite.address2 = site.address2;\r\n                existingSite.businessLayer1 = site.businessLayer1;\r\n                existingSite.city = site.city;\r\n                existingSite.country = db.findCountryByName(site.country.name);\r\n                existingSite.state = db.findStateByName(site.state.name);\r\n                existingSite.name = site.name;\r\n                existingSite.siteNo = site.siteNo;\r\n                existingSite.suburb = site.suburb;\r\n                return  {errors,  site: existingSite};\r\n            }\r\n            \r\n            return  {errors,  site};\r\n        }  \r\n    };              \r\n    \r\n    let businessLayer = new GraphQLObjectType({\r\n        name: \"businessLayer\",\r\n        fields: {\r\n            id: {type: GraphQLInt},\r\n            name: {type: GraphQLString}\r\n        }\r\n    });\r\n    \r\n    let businessLayerInput = new inputType({\r\n        name: \"businessLayerInput\",\r\n        fields: {\r\n            id: {type: GraphQLInt},\r\n            name: {type: GraphQLString}\r\n        }\r\n    });\r\n    \r\n     let agreement = new GraphQLObjectType({\r\n        name: \"agreement\",\r\n        fields: {\r\n            id: {type: GraphQLInt},\r\n            name: {type: GraphQLString}\r\n        }\r\n    });\r\n    \r\n     let agreementInput = new inputType({\r\n        name: \"agreementInput\",\r\n        fields: {\r\n            id: {type: GraphQLInt},\r\n            name: {type: GraphQLString}\r\n        }\r\n    });\r\n    \r\n    let orgUnit = new GraphQLObjectType({\r\n        name: \"orgUnit\",\r\n        fields: () => ({\r\n            id: {type: GraphQLInt},\r\n            title: {type: GraphQLString},\r\n            parent: {type: orgUnit},\r\n            layerNo: {type: GraphQLInt},\r\n            layer1: {type: GraphQLString},\r\n            layer2: {type: GraphQLString},\r\n            layer3: {type: GraphQLString},\r\n            layer4: {type: GraphQLString},\r\n        })\r\n    });\r\n    \r\n     let orgUnitInput = new inputType({\r\n        name: \"orgUnitInput\",\r\n        fields: () => ({\r\n            id: {type: GraphQLInt},\r\n            title: {type: GraphQLString},\r\n            parent: {type: orgUnitInput},\r\n            layerNo: {type: GraphQLInt},\r\n            layer1: {type: GraphQLString},\r\n            layer2: {type: GraphQLString},\r\n            layer3: {type: GraphQLString},\r\n            layer4: {type: GraphQLString},\r\n        })\r\n    });\r\n    \r\n    let insertSite = {\r\n        name: \"updateSite\",\r\n        type: updateSiteResult,\r\n        args: {\r\n            site: {type: inputSite}\r\n        },\r\n        resolve: (value, {site}) => {\r\n            let errors = [];\r\n            console.log(\"In resolver\")\r\n            if (!validator.validateCountry(site.country))\r\n                errors.push(...[\"country\",\"country must be supplied\"]);\r\n            else {\r\n                site.id = db.sites.length;\r\n                site.country = db.findCountryByName(site.country.name);\r\n                site.state = db.findStateByName(site.state.name);\r\n                db.sites.push(site);\r\n            }\r\n            return  {errors, site};\r\n        }  \r\n    };\r\n    \r\n    let position = new GraphQLObjectType({\r\n        name: \"position\",\r\n        fields: () => ({\r\n                name: { type: GraphQLString },\r\n                id: {type: GraphQLString },\r\n                site: {type: site},\r\n                delegationLevel: {type: delegationLevelEnum},\r\n                brand: {type: businessLayer},\r\n                department: {type: businessLayer},\r\n                subDepartment: {type: businessLayer},\r\n                departmentPosition: {type: businessLayer},\r\n                location: {type: GraphQLString},\r\n                agreement: {type: GraphQLString},\r\n                agreementType: {type: agreementTypeEnum},\r\n                agreementClassification: {type: agreementClassificationEnum},\r\n                jobType: {type: jobTypeEnum},\r\n                payScale: {type: GraphQLInt},\r\n                workType: {type: workTypeEnum},\r\n                costCenter: {type: costCenter},\r\n                orgUnit: {type: orgUnit},\r\n                jobSector: {type: jobSectorEnum},\r\n                asset: {type: assetEnum},\r\n                parent: {\r\n                    type: position,\r\n                    resolve: (position) => {\r\n                        return db.position[position.parent];\r\n                    }\r\n                },\r\n                salaryFunded: {type: GraphQLBoolean }\r\n            })\r\n        });\r\n        \r\n    let user = new GraphQLObjectType({\r\n        name: \"user\",\r\n        fields: () => ({\r\n            id: {type: GraphQLString},\r\n            position: \r\n            { \r\n                type: position,\r\n                resolve: (user, args, ast) => {\r\n                    console.log(user.position);\r\n                    console.log(db.positions.length);\r\n                    return db.positions[user.position];\r\n            }},\r\n            firstName: {type: GraphQLString},\r\n            lastName: {type: GraphQLString},\r\n        })\r\n    });\r\n            \r\n    let userInput = new inputType({\r\n        name: \"userInput\",\r\n        fields: () => ({\r\n            id: {type: GraphQLString},\r\n            position: {type: positionEnum},\r\n            firstName: {type: GraphQLString},\r\n            lastName: {type: GraphQLString}\r\n        })\r\n    });       \r\n        \r\n    let inputUserResult = new GraphQLObjectType({\r\n        name: \"inputUserResult\",\r\n        fields: () => ({\r\n            errors: {type: new GraphQLNonNull(new GraphQLList(GraphQLString))},\r\n            user: {type: user}\r\n        })\r\n    });\r\n\r\n    \r\n    let inputUserHandler =  {\r\n            name: \"inputUserHandler\",\r\n            type: inputUserResult,\r\n            args: {\r\n                user: {type: userInput}\r\n            },\r\n            resolve: (value, {user}) => {\r\n                let errors = [];\r\n            \r\n            return  {errors, user};\r\n        }  \r\n    }\r\n\r\n    let schema = new GraphQLSchema({\r\n        query: new GraphQLObjectType({\r\n            name: \"query\",\r\n            fields: () => ({\r\n                sites: {\r\n                    type: new GraphQLList(site),\r\n                    resolve: (parent, args, ast) => {\r\n                        if (args.id != undefined)\r\n                            return [ db.sites[args.id] ];\r\n                        else if (args.country != undefined){\r\n                            var c = db.countries.filter(function(e){ return e.name == args.country});\r\n                            if (c.length == 1){    \r\n                                return db.sites.filter(function(row){\r\n                                    return row.country == c[0].id; \r\n                                });\r\n                            }\r\n                            return null;\r\n                        }\r\n                        return db.sites;                            \r\n                    },\r\n                    args: {\r\n                        id: {\r\n                          name: \"id\",\r\n                          type: GraphQLInt  \r\n                        },\r\n                        country: {\r\n                          name: \"country\",\r\n                          type: GraphQLString  \r\n                        }\r\n                    }\r\n                },\r\n                countries: {\r\n                    type: new GraphQLList(country),\r\n                    resolve: () => {\r\n                        return db.countries;\r\n                    }\r\n                },\r\n                states: {\r\n                    type: new GraphQLList(state),\r\n                    resolve: () => {\r\n                        return db.states;\r\n                    }\r\n                },\r\n                users: {\r\n                    type: new GraphQLList(user),\r\n                    resolve: () => {\r\n                        return db.users;\r\n                    }\r\n                },\r\n                positions: {\r\n                    type: new GraphQLList(position),\r\n                    resolve: () => {\r\n                        return db.positions;\r\n                    }\r\n                }\r\n            }) \r\n        }),\r\n        mutation: new GraphQLObjectType({\r\n            name: \"mutation\",\r\n            fields: () => ({\r\n                updateSite: updateSite,\r\n                insertSite: insertSite,\r\n                insertUser: inputUserHandler\r\n            }),   \r\n        })\r\n    });\r\n    \r\n    return schema;\r\n}\r\n\r\nexport default Schema;"]}